newdata$A11bp_hmm10[qhits] <- hg19_to_mm10$A_11bp_mm10[shits]
newdata$base_mm10[qhits] <- 'A'
}else{
newdata$PUlearningMm10_score <- 0
newdata$A11bp_hmm10 <- '-'
newdata$base_mm10 <- 'other'
}
#
indx <- which(newdata$conserved_status == 'conserved')
if(length(indx) != 0){
newdata[indx]$PUlearningHg19_score <- 1
newdata[indx]$PUlearningMm10_score <- 1
}
############################################################################################
####                                 PhastCons score                                    ####
############################################################################################
library(phastCons100way.UCSC.hg19)
gsco <- phastCons100way.UCSC.hg19
newdata <- gscores(gsco, newdata,pop="DP2")
indx_na <- as.numeric(attr(na.omit(newdata$DP2),"na.action"))
if(length(indx_na) != 0){
newdata$DP2[indx_na] <- 0
}
}else{
newdata <- readRDS('./example_newdata.rds')
}
??DNAStringSet
??Views
hg19InMm10_m6AConservationInfo <- readRDS("/Users/huangjiaming/Desktop/conservation/revision/hg19InMm10_m6AConservationInfo_updated_3.rds")  ##研究过的m6A位点（无研究必要）
hg19InMm10_m6AConservationInfo
bloodgrp<-c("B","AB","O","A","O","O","A","B")
bloodgrp<-c("B","AB","O","A","O","O","A","B")
bloodgrp
#convert vector to factor
bloodgrp_factor<-factor(bloodgrp)
bloodgrp_factor
bloodgrp_factor<-factor(bloodgrp,levels=c("O","A","B","AB"))
#Factors in R
bloodgrp<-c("B","AB","O","A","O","O","A","B")
bloodgrp
#convert vector to factor
bloodgrp_factor<-factor(bloodgrp)
bloodgrp_factor
str(bloodgrp_factor)
bloodgrp_factor2<-factor(bloodgrp,levels=c("O","A","B","AB"))
bloodgrp_factor2
bloodgrp_factor2<-factor(bloodgrp,levels=c("O","A","B","AB"))
bloodgrp_factor2
str(bloodgrp_factor2)
bloodgrp_factor
str(bloodgrp_factor)
#name levels
levels(bloodgrp_factor)<-c("BT_A","BT_AB","BT_B","BT_O")
bloodgrp_factor
str(bloodgrp_factor)
factor(bloodgrp,labels=c("BT_A","BT_AB","BT_B","BT_O"))
bloodgrp_factor
str(bloodgrp_factor)
#Factors in R
bloodgrp<-c("B","AB","O","A","O","O","A","B")
bloodgrp
#convert vector to factor
bloodgrp_factor<-factor(bloodgrp)
bloodgrp_factor
#name levels
levels(bloodgrp_factor)<-c("BT_A","BT_AB","BT_B","BT_O")#ording+naming
bloodgrp_factor
str(bloodgrp_factor)
#Factors in R
bloodgrp<-c("B","AB","O","A","O","O","A","B")
bloodgrp
#convert vector to factor
bloodgrp_factor<-factor(bloodgrp)
bloodgrp_factor
str(bloodgrp_factor)
#name levels
levels(bloodgrp_factor)<-c("BT_A","BT_AB","BT_B","BT_O")#ording+naming
#name levels
levels(bloodgrp_factor)<-c("BT_AB","BT_A","BT_B","BT_O")#ording+naming
bloodgrp_factor
str(bloodgrp_factor)
factor(bloodgrp,levels=c("O","A","B","AB"),labels=c("BT_O","BT_A","BT_B","BT_AB"))
bloodgrp
#convert vector to factor
bloodgrp_factor<-factor(bloodgrp)
bloodgrp_factor
str(bloodgrp_factor)
bloodgrp_factor2<-factor(bloodgrp,levels=c("O","A","B","AB"))
bloodgrp_factor2
str(bloodgrp_factor2)
#name levels
levels(bloodgrp_factor)<-c("BT_A","BT_AB","BT_B","BT_O")#ording+naming,当level名词与factor不对应试，只起到name作用
bloodgrp_factor
str(bloodgrp_factor)
factor(bloodgrp,labels=c("BT_A","BT_AB","BT_B","BT_O"))#naming
bloodgrp_factor
str(bloodgrp_factor)
bloodgrp_factor
bloodgrp_factor[1]<bloodgrp_factor[2]
dressSize<-c("M","L","S","S","L")
dressSize<-c("M","L","S","S","L","M","L","M")
dressSize_factor<-factor(dressSize,ordered=TRUE,levels=c("S","M","L"))
dressSize_factor
dressSize_factor[1]<dressSize_factor[2]
Type<-c("s","m","l","s","l","m")
Type[3]>Type[4]
Type[1]>Type[2]
Type[2]>Type[3]
"s">"m"
Type<-c("s","m","l","s","l","m")
Type[3]>Type[4]
Type[1]>Type[2]
Type[2]>Type[3]
Type.factor<-factor(TRUE)
#Default Nominal factor
Type.factor
Type.factor2<-factor(Type,ordered=T)
#Factor created in ordinal
Type.factor2
#Factor created in ordinal
Type.factor2
Type.factor3<-factor(Type,ordered=T,levels=c("s","m","l"))
Type.factor4[1]>Type.factor4[2]
#Ordered factor with user given order name
Type.factor4<-factor(Type,ordered=T,level=c("s","m","l"),labels=c("small","medium","large"))
Type.factor4
Type.factor4[1]>Type.factor4[2]
Type<-c("Small","Tall","Tallest","Medium","Small","Medium","Tallest","Tall","Small","Small")
Type
Type.factor5<-factor(Type,ordered=T,level=c("Small","Medium","Tall","Tallest"))
as.integer(Type.factor5)
str(Type.factor5)
v<-c(1,2,3)
#convert the vector into a list usinh as.list()
as.list()
#convert the vector into a list using as.list()
as.list(v)
#Convert the vector into a matrix
as.matrix(v)
#Sample 2 random values between 10 and 20
sample(x=10:20,1)#The value changes everytime you run it
#Sample 2 random values between 10 and 20
sample(x=10:20,1)#The value changes everytime you run it
#Sample 2 random values between 10 and 20
sample(x=10:20,1)#The value changes everytime you run it
#Sample 2 random values between 10 and 20
sample(x=10:20,1)#The value changes everytime you run it
#Sample 2 random values between 10 and 20
sample(x=10:20,1)#The value changes everytime you run it
#Sample 2 random values between 10 and 20
sample(x=10:20,1)#The value changes everytime you run it
#Sample 2 random values between 10 and 20
sample(x=10:20,1)#The value changes everytime you run it
round(45.12345)
round(45.12345,2)
ceiling(45.12345)
trunc(56.783)
round(56.783)
round(45.12345)
exp(2)
#working with timestamps
Sys.Date()#Returns the current system date
#Set as a variable
today<-Sys.Date()
today
#YYYY-MM-DD
as.Date('1990-11-03')
#YYYY-MM-DD
d<-as.Date('1990-11-03')
class(d)
typeof(d)
#Using Format
#%b month abbreviated
#%d day of the month
#%y year in 2 digits
as.Date("Nov-03-90",format="%b-%d-%y")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%D-%Y-%B")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%D-%Y-%B")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%D-%Y-%B")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%B-%D-%Y")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%B-%D-%Y")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%B-%D-%Y")
#Using Format
#%b month abbreviated
#%d day of the month
#%y year in 2 digits
as.Date("Nov-03-90",format="%b-%d-%y")
#Using Format
#%b month abbreviated
#%d day of the month
#%y year in 2 digits
as.Date("Nov-03-90",format="%d-%y-%b")
#Using Format
#%b month abbreviated
#%d day of the month
#%y year in 2 digits
as.Date("Nov-03-90",format="%d-%y-%b")
#Using Format
#%b month abbreviated
#%d day of the month
#%y year in 2 digits
as.Date("Nov-03-90",format="%d-%y-%b")
#Using Format
#%b month abbreviated
#%d day of the month
#%y year in 2 digits
as.Date("Nov-03-90",format="%d-%y-%b")
#Using Format
#%b month abbreviated
#%d day of the month
#%y year in 2 digits
as.Date("Nov-03-90",format="%b-%d-%y")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%B-%D-%Y")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-0300-1990",format="%B-%D-%Y")
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%B-%D-%Y")
Date@%B
Date%B
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%B-%D-%Y")
setwd("~")
getwd()
#Using Format
#%B Full month name
#%Y year in 4 digits
as.Date("November-03-1990",format="%B-%d-%Y")
#Data manipulation in R - dplyr
#The dplyr package is used to transform and summarize tabular(表格式) data with rows and columns
#select() - It selects column variables based on their names
#filter() - It filter rows based on their values
#arrange() - It changes the ordering of rows
#summary() - It reduces multiple values down to a single summary
#mutate() - It creates columns that are functions of existing variables
install.packages("dplyr")
library(dplyr)
install.packages("nycflights13")
library(nycflights13)
library("nycflights13")
library(nycflights13)
data()
head(flights)
View(flights)
data()
head(flights)
f1<-filter(flights,month==07)
View(f1)
f2<-filter(flights,month==07,days==3)
f2
f2<-filter(flights,month==07,days==3)
f2<-filter(flights,month==07,day==3)
f2
View(f2)
View(filter(flights,month==09,day==2,origin=='LGA'))
head(flights[flights$month==09 & flights$day==2 & flights$origin=='LGA',])
slice(flights,1:5)
slice(flights,5:10)
arr_delay
over_delay<-mutate(flights,overall_delay=arr_delay-dep_delay)
arr_delay
dep_delay
arr_delay-dep_delay
flights
View(over_delay)
View(flights)
head(over_delay)
over_delay<-transmute(flights,overall_delay=arr_delay=dep_delay)
over_delay<-transmute(flights,overall_delay=arr_delay-dep_delay)
View(over_delay)
data(air_time)
flights$air_time
summarise(flights,avg_air_time=mean(air_time,na.rm=T))#flights$air_time
?summarise
summarise(flights,tot_air_time=sum(air_time,na.rm=T))
summarise(flights,avg_air_time=mean(air_time,na.rm=T))#flights$air_time
summarise(flights,tot_air_time=sum(air_time,na.rm=T))
summarise(flights,stdev_air_time=sd(air_time,na.rm=T))
summarise(flights,avg_air_time=mean(air_time,na.rm=T),tot_air_time=sum(air_time,na.rm=T),)
mtcars %>% group_by(gear)
by_gear<-mtcars %>% group_by(gear)
View(by_gear)
gear
mtcars
a<-summarise(by_gear,gear1=sum(gear),gear2=mean(gear))
a
a<-summarise(by_gear,gear1=sum(gear),gear2=mean(gear))
a
by_gear
a<-summarise(by_gear,gear1=sum(gear),gear2=mean(gear))
a
group_by(mtcars,gear)
mtcars
by_gear<-mtcars %>% group_by(gear)#%>% is pipe operator; Syntax:data %>% group_by(var1, var2, ...)
#=group_by(mtcars,gear)
by_gear
View(by_gear)
a<-summarise(by_gear,gear1=sum(gear),gear2=mean(gear))
a
by_gear<-mtcars %>% group_by(gear)#%>% is pipe operator; Syntax:data %>% group_by(var1, var2, ...)
by_gear<-mtcars %>% group_by(gear)#%>% is pipe operator; Syntax:data %>% group_by(var1, var2, ...)
by_gear
group_by(mtcars,cyl)
summarise(group_by(mtcars,cyl),mean(gear,na.rm=TRUE))#按照cyl的分组结果计算gear的mean值
b<-by_gear %>% summarise(gear1=sum(gear),gear2=mean(gear))
b
by_cyl<-mtcars %>% group_by(cyl)
head(by_cyl)
flights
sample_n(flights,15)#give 15 random samples
sample_frac(flights,0.4)#returns 40% of the total data
View(arrange(flights,year,dep_time))
table(flights$year)
View(arrange(flights,carrier,dep_time))
result<-arrange(sample_n(filter(df,mpg>20),size=5),desc(mpg))
View(result)
result<-arrange(sample_n(filter(df,mpg>20),size=5),desc(mpg))
df<-mtcars
df
result<-arrange(sample_n(filter(df,mpg>20),size=5),desc(mpg))
View(result)
a<-filter(df,mpg>20)
b<-sample_n(a,size=5)
result<-arrange(b,desc(mpg))
result
result<-df %>% filter(mpg>20) %>% sample_n(size=5) %>% arrange(desc(mpg))
result
#Data manipulation using Tidyr
install.packages('tidyr')
library('tidyr')
df_mpg_hp_cyl<-df %>% select(mpg,hp,cyl)
head(df_mpg_hp_cyl)
library("dplyr")
df_mpg_hp_cyl<-df %>% select(mpg,hp,cyl)
?select
df<-mtcars
df_mpg_hp_cyl<-df %>% select(mpg,hp,cyl)
head(df_mpg_hp_cyl)
n<-10
wide<-data.frame(
ID<-c(1:n),
Face.1=c(411,723,325,456,579,612,709,513,527,379),
Face.2=c(123,300,400,500,600,654,789,906,413,567),
Face.3=c(1457,1000,569,896,956,2345,780,599,1023,678)
)
View(wide)
installed.packages("datasets")
#这行代码用于检查 R 环境中是否已经安装了 "datasets" 包。
#如果已经安装，则会返回已安装的信息；如果没有安装，则会返回一条错误信息
plot(ChickWeight)
#base graphics
library(MASS)
plot(UScereal$sugars,UScereal$calories)
#base graphics
library(MASS)
plot(UScereal$sugars,UScereal$calories)
title("plot(UScereal$sugars,UScereal$calories)")
#Create a bar chart using geom_bar
#To create a bar chart,you can use the aesthetics parameter in geom_bar function
library(ggplot2)
head(mpg,n=10)
str(mpg)
install.packages("tidyverse")
library(tidyverse)
ggplot(mpg)+geom_bar(aes(x=class))
ggplot(mpg)+geom_bar(aes(x=class,fill=drv))
ggplot(mpg)+geom_bar(aes(x=class))
ggplot(mpg)+geom_bar(aes(x=class,fill=drv))
ggplot(mpg)+geom_bar(aes(x=class,fill=factory(cyl),position=position_dodge(preserve='single')))
ggplot(mpg)+geom_bar(aes(x=class,fill=factory(cyl)),position=position_dodge(preserve='single'))
ggplot(mpg)+geom_bar(aes(x=class,fill=factory(cyl)),position=position_dodge(preserve='single'))
rlang::last_error()
#Use dplyr to calculate the average hwy_mpg by class
by_hwy_mpg<-mpg %>% group_by(class) %>% summarise(hwy_mpg=mean(hwy))
ggplot(by_hwy_mpg)+geom_bar(aes(x=class,y=hwy_mpg),stat='identity')
library(tidyverse)
#Filter the data we need
Tree_1<-filter(Orange,Tree==1)
#Graph the data
ggplot(tree_1)+geom_line(aes(x=age,y=circumference))
mtcars$gear<-factor(mtcars$gear,levels=c(3,4,5),labels=c("3gears","4gears","5gears"))
p<-plot_ly(data=mtcats,x=-hp,y=-wt,marker=list(size=10,color='rgba(255,182,193,.9)',line=list(color='rgba(152,0,0,.8)',width=2)))
library(plotly)
install.packages("plotly")
library(plotly)
p<-plot_ly(data=mtcats,x=-hp,y=-wt,marker=list(size=10,color='rgba(255,182,193,.9)',line=list(color='rgba(152,0,0,.8)',width=2)))
################################################################################
##############################      加载R包      ###############################
################################################################################
library(e1071) #支持向量机（SVM）模型
library(ROCR) #R接收者操作特征（ROC）曲线
library(pROC) #机器学习算准确度要用的包
library(dplyr) #特征选择，数据框操作
library(m6ALogisticModel) #独立开发的机器学习包
library(SummarizedExperiment) #基因组数据处理
library(TxDb.Hsapiens.UCSC.hg19.knownGene) #基因组数据处理
library(BSgenome.Hsapiens.UCSC.hg19) #基因组数据处理
library(MLmetrics) #模型评估
library(caret) #交叉验证
#构建特征要用的包：
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(phastCons100way.UCSC.hg19)
library(fitCons.UCSC.hg19)
#制作网站要用的包：
library(jsonlite)
################################################################################
###########################     设置工作目录      ##############################
################################################################################
target_dir1<-'/Users/huangjiaming/Desktop/cancer_m6A_predictor/webserver_ali'#阿里云的网址
#target_dir1<-'/www/wwwroot/rnamd.org/m6A-CAPred/job/jobID/file_name'
target_dir2<-'/Users/huangjiaming/Desktop/cancer_m6A_predictor/webserver_home'#本地服务器
#target_dir2<-'/home/jiaming/file'
setwd(target_dir2)
################################################################################
###############################      输入      #################################
################################################################################
data<-readRDS(paste0(target_dir1,'/data.rds'))
################################################################################
############################      搭建特征      ################################
################################################################################
#genomic feature
#定义GFgenreation_m6A函数
GFgenreation_m6A <- function(data){
analysis_data <- data
matureSE <- SummarizedExperiment()
rowRanges(matureSE) <- analysis_data
Additional_features_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr,
METTL3_TREW = METTL3_TREW,
METTL14_TREW = METTL14_TREW,
WTAP_TREW = WTAP_TREW,
METTL16_CLIP = METTL16_CLIP,
ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
data_standardized <- predictors_annot(se = matureSE,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Additional_features_hg19,
hk_genes_list = HK_hg19_eids,
motif = c("DRACH"),
motif_clustering = "A",
isoform_ambiguity_method = "longest_tx",
genes_ambiguity_method = "average",
annot_clustering = matureSE,
standardization = T)
GF <- mcols(data_standardized)
return(GF)
}
GF_data <- GFgenreation_m6A(data)
################################################################################
###############################     存为json     ###############################
################################################################################
input.json <- commandArgs(trailingOnly = T)
jobID<-input_json[2]
################################################################################
###############################     存为json     ###############################
################################################################################
input_json <- commandArgs(trailingOnly = T)
jobID<-input_json[2]
jobID
################################################################################
###############################      输入      #################################
################################################################################
data<-readRDS(paste0(target_dir1,'/data.rds'))
write.table(data, "data.txt",row.names = FALSE)
################################################################################
###############################      输入      #################################
################################################################################
data<-readRDS(paste0(target_dir1,'/data.rds'))
jobID<-input_json[1]
################################################################################
###############################      输入      #################################
################################################################################
data<-readRDS(paste0(target_dir1,'/data.rds'))
write.table(data, "data.txt",row.names = FALSE)
