################################################################################
##############################      加载R包      ###############################
################################################################################
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(SummarizedExperiment)
library(BSgenome.Hsapiens.UCSC.hg19)
library(e1071)
library(ROCR)
library(pROC)
library(dplyr)
library(caret)
library(m6ALogisticModel)
library(MLmetrics)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
################################################################################
###########################     设置工作目录      ##############################
################################################################################
setwd('/Users/huangjiaming/Desktop/cancer_m6A_predictor/file_featureSelection')
################################################################################
###########################     删除含有NA行      ##############################
################################################################################
NsampleALL <- readRDS("./NFeatureBoth.rds")#genomic and sequence features for negative data
a <- NA
for (i in 1:length(names(NsampleALL))) {
b <- which(is.na(NsampleALL[,i]))
a <- c(a,b)
}
a <- unique(a)
a <- a[-1]
NsampleALL <- NsampleALL[-a,] #delete row which contains NA
################################################################################
##########################      特征重要性计算      ############################
################################################################################
#定义函数: F_score_fn
F_score_fn <- function(dataframe){
#change logic feature to numeric feature
for (i in 1:(ncol(dataframe))){ #遍历每一列
if (is.logical(dataframe[,i]) == TRUE){ #判断是逻辑型转换为0 or 1
dataframe[,i] <- as.numeric(dataframe[,i])
}
}
dataframe <- as.data.frame(dataframe)
#variables
half_index <- nrow(dataframe)/2 #一半索引
pos_part <- dataframe[c(1:half_index),] #前半索引行：1:2714 列：1:223
neg_part <- dataframe[-c(1:half_index),] #后半索引行：1:2714 列：1:223
pos_mean <- colMeans(pos_part) #前半索引行每列均值拼成一个1*223的向量
neg_mean <- colMeans(neg_part) #后半索引行每列均值拼成一个1*223的向量
total_mean <- colMeans(dataframe) #全部索引行每列均值拼成一个1*223的向量
df_pos_mean <- matrix(NA, ncol = ncol(pos_part), nrow = nrow(pos_part)) #2714*223
df_neg_mean <- matrix(NA, ncol = ncol(neg_part), nrow = nrow(neg_part)) #2714*223
for (i in 1:nrow(pos_part)){
df_pos_mean[i,] <- pos_mean #2714行都一样，为pos_mean
df_neg_mean[i,] <- neg_mean #2714行都一样，为neg_mean
}
#Numerator(分子)
numerator <- (pos_mean - total_mean)^2 + (neg_mean - total_mean)^2
#Denominator(分母)
denominator <- 1/(half_index - 1)*(colSums((pos_part - df_pos_mean)^2) + colSums((neg_part - df_neg_mean)^2))
#F_score
F_score <- as.data.frame(numerator / denominator)
return(F_score)
}
train_data <- readRDS("./train_data.rds")
importance <- F_score_fn(train_data)
train_data
#change logic feature to numeric feature
for (i in 1:(ncol(dataframe))){ #遍历每一列
if (is.logical(dataframe[,i]) == TRUE|FALSE){ #判断是逻辑型转换为0 or 1
dataframe[,i] <- as.numeric(dataframe[,i])
}
}
################################################################################
##########################      特征重要性计算      ############################
################################################################################
#定义函数: F_score_fn
F_score_fn <- function(dataframe){
#change logic feature to numeric feature
for (i in 1:(ncol(dataframe))){ #遍历每一列
if (is.logical(dataframe[,i]) == TRUE|FALSE){ #判断是逻辑型转换为0 or 1
dataframe[,i] <- as.numeric(dataframe[,i])
}
}
dataframe <- as.data.frame(dataframe)
#variables
half_index <- nrow(dataframe)/2 #一半索引
pos_part <- dataframe[c(1:half_index),] #前半索引行：1:2714 列：1:223
neg_part <- dataframe[-c(1:half_index),] #后半索引行：1:2714 列：1:223
pos_mean <- colMeans(pos_part) #前半索引行每列均值拼成一个1*223的向量
neg_mean <- colMeans(neg_part) #后半索引行每列均值拼成一个1*223的向量
total_mean <- colMeans(dataframe) #全部索引行每列均值拼成一个1*223的向量
df_pos_mean <- matrix(NA, ncol = ncol(pos_part), nrow = nrow(pos_part)) #2714*223
df_neg_mean <- matrix(NA, ncol = ncol(neg_part), nrow = nrow(neg_part)) #2714*223
for (i in 1:nrow(pos_part)){
df_pos_mean[i,] <- pos_mean #2714行都一样，为pos_mean
df_neg_mean[i,] <- neg_mean #2714行都一样，为neg_mean
}
#Numerator(分子)
numerator <- (pos_mean - total_mean)^2 + (neg_mean - total_mean)^2
#Denominator(分母)
denominator <- 1/(half_index - 1)*(colSums((pos_part - df_pos_mean)^2) + colSums((neg_part - df_neg_mean)^2))
#F_score
F_score <- as.data.frame(numerator / denominator)
return(F_score)
}
train_data <- readRDS("./train_data.rds")
importance <- F_score_fn(train_data)
################################################################################
##########################      特征重要性计算      ############################
################################################################################
#定义函数: F_score_fn
F_score_fn <- function(dataframe){
#change logic feature to numeric feature
for (i in 1:(ncol(dataframe))){ #遍历每一列
if (is.logical(dataframe[,i]) == TRUE){ #判断是逻辑型转换为0 or 1
dataframe[,i] <- as.numeric(dataframe[,i])
}
}
dataframe <- as.data.frame(dataframe)
#variables
half_index <- nrow(dataframe)/2 #一半索引
pos_part <- dataframe[c(1:half_index),] #前半索引行：1:2714 列：1:223
neg_part <- dataframe[-c(1:half_index),] #后半索引行：1:2714 列：1:223
pos_mean <- colMeans(pos_part) #前半索引行每列均值拼成一个1*223的向量
neg_mean <- colMeans(neg_part) #后半索引行每列均值拼成一个1*223的向量
total_mean <- colMeans(dataframe) #全部索引行每列均值拼成一个1*223的向量
df_pos_mean <- matrix(NA, ncol = ncol(pos_part), nrow = nrow(pos_part)) #2714*223
df_neg_mean <- matrix(NA, ncol = ncol(neg_part), nrow = nrow(neg_part)) #2714*223
for (i in 1:nrow(pos_part)){
df_pos_mean[i,] <- pos_mean #2714行都一样，为pos_mean
df_neg_mean[i,] <- neg_mean #2714行都一样，为neg_mean
}
#Numerator(分子)
numerator <- (pos_mean - total_mean)^2 + (neg_mean - total_mean)^2
#Denominator(分母)
denominator <- 1/(half_index - 1)*(colSums((pos_part - df_pos_mean)^2) + colSums((neg_part - df_neg_mean)^2))
#F_score
F_score <- as.data.frame(numerator / denominator)
return(F_score)
}
train_data <- readRDS("./train_data.rds")
importance <- F_score_fn(train_data)
importance
importance
？ncol
?ncol
train_data <- readRDS("./train_data.rds")
#change logic feature to numeric feature
for (i in 1:(ncol(dataframe))){ #遍历每一列
if (is.logical(dataframe[,i]) == TRUE){ #判断是逻辑型转换为0 or 1
dataframe[,i] <- as.numeric(dataframe[,i])
}
}
#change logic feature to numeric feature
for (i in 1:(ncol(train_data))){ #遍历每一列
if (is.logical(train_data[,i]) == TRUE){ #判断是逻辑型转换为0 or 1
dataframe[,i] <- as.numeric(dataframe[,i])
}
}
#change logic feature to numeric feature
for (i in 1:(ncol(train_data))){ #遍历每一列
if (is.logical(train_data[,i]) == TRUE){ #判断是逻辑型转换为0 or 1
train_data[,i] <- as.numeric(train_data[,i])
}
}
train_data
dataframe <- as.data.frame(dataframe)
train_data <- as.data.frame(train_data)
#variables
half_index <- nrow(train_data)/2 #一半索引
#variables
half_index <- nrow(train_data)/2 #一半索引
pos_part <- train_data[c(1:half_index),] #前半索引行：1:2714 列：1:223
neg_part <- train_data[-c(1:half_index),] #后半索引行：1:2714 列：1:223
pos_mean <- colMeans(pos_part) #前半索引行每列均值拼成一个1*223的向量
pos_part
is.na(pos_part)
unnique(is.na(pos_part))
unique(is.na(pos_part))
is.numeric(pos_part)
class(pos_part)
which(is.numeric(pos_part)==FALSE)
unique(pos_part[,1])
str(pos_part)
unique(str(pos_part))
################################################################################
###########################     删除含有NA行      ##############################
################################################################################
NsampleALL <- readRDS("./NFeatureBoth.rds") #genomic and sequence features for negative data
a <- NA
for (i in 1:length(names(NsampleALL))) {
b <- which(is.na(NsampleALL[,i]))
a <- c(a,b)
}
a <- unique(a)
a <- a[-1]
NsampleALL <- NsampleALL[-a,] #delete row which contains NA
################################################################################
##########################      特征重要性计算      ############################
################################################################################
#定义函数: F_score_fn
F_score_fn <- function(dataframe){
#change logic feature to numeric feature
for (i in 1:(ncol(train_data))){ #遍历每一列
if (is.logical(train_data[,i]) == TRUE){ #判断是逻辑型转换为0 or 1
train_data[,i] <- as.numeric(train_data[,i])
}
}
train_data <- as.data.frame(train_data)
#variables
half_index <- nrow(train_data)/2 #一半索引
pos_part <- train_data[c(1:half_index),] #前半索引行：1:2714 列：1:223
neg_part <- train_data[-c(1:half_index),] #后半索引行：1:2714 列：1:223
pos_mean <- colMeans(pos_part) #前半索引行每列均值拼成一个1*223的向量
neg_mean <- colMeans(neg_part) #后半索引行每列均值拼成一个1*223的向量
total_mean <- colMeans(train_data) #全部索引行每列均值拼成一个1*223的向量
df_pos_mean <- matrix(NA, ncol = ncol(pos_part), nrow = nrow(pos_part)) #2714*223
df_neg_mean <- matrix(NA, ncol = ncol(neg_part), nrow = nrow(neg_part)) #2714*223
for (i in 1:nrow(pos_part)){
df_pos_mean[i,] <- pos_mean #2714行都一样，为pos_mean
df_neg_mean[i,] <- neg_mean #2714行都一样，为neg_mean
}
#Numerator(分子)
numerator <- (pos_mean - total_mean)^2 + (neg_mean - total_mean)^2
#Denominator(分母)
denominator <- 1/(half_index - 1)*(colSums((pos_part - df_pos_mean)^2) + colSums((neg_part - df_neg_mean)^2))
#F_score
F_score <- as.data.frame(numerator / denominator)
return(F_score)
}
train_data <- readRDS("./train_data.rds")
importance <- F_score_fn(train_data)
if (is.logical(train_data[,i]) == TRUE){ #判断是逻辑型转换为0 or 1
train_data[,i] <- as.numeric(train_data[,i])
}
#change logic feature to numeric feature
for (i in 1:(ncol(train_data))){ #遍历每一列
if (is.logical(train_data[,i]) == TRUE){ #判断是逻辑型转换为0 or 1
train_data[,i] <- as.numeric(train_data[,i])
}
}
train_data <- as.data.frame(train_data)
#variables
half_index <- nrow(train_data)/2 #一半索引
pos_part <- train_data[c(1:half_index),] #前半索引行：1:2714 列：1:223
neg_part <- train_data[-c(1:half_index),] #后半索引行：1:2714 列：1:223
pos_mean <- colMeans(pos_part) #前半索引行每列均值拼成一个1*223的向量
str(pos_part, list.len=ncol(pos_part))
length(colnames(pos_part))
train_data <- train_data[,-213]
importance <- F_score_fn(train_data)
indx <- order(-importance$`numerator/denominator`)
indx <- rownames(importance)[indx]
saveRDS(importance,'importance.rds')
saveRDS(indx,'featureImportanceOrder.rds')
################################################################################
################################      作图      ################################
################################################################################
importance <- readRDS("./importance.rds")
indx <- order(-importance$`numerator/denominator`)
rownames <- rownames(importance)
rownames <- as.data.frame(rownames)
rownames_arranged <- rownames[indx,]
imp <- importance[indx,]
imp <- as.data.frame(imp)
rownames(imp) <- rownames_arranged
imp$name <- factor(rownames(imp),levels = rownames(imp))
colnames(imp) <- c("importance","name")
imp$importance2 <- scale(imp$importance, center=T, scale=T)   ## normalization
a<-ggplot(imp[1:24,],aes(name,importance))+geom_bar(stat='identity')                                                 +theme(axis.text.x = element_text(angle = 90))
ggsave('./FeatureImportance.pdf',a,height = 4,width = 5)
