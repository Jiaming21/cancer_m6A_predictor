"Interactive Data Analysis",
"An introduction to R"),
other.author=c(NA,"Ripley",NA,NA,NA,NA,"Venables & Smith")
)
books$name
c1
toupper(c1)#converts to uppercase
substr(c1,1,2)
name<-paste(c1,c2)
name
names1<-paste0(c1,c2)
names1
name<-paste(c1,c2,sep=',')
name
newname<-sub("Rob","Cena",name)
length(c1)
sub("Rob","Cena",name)
name
length(c1)
nchar(c1)
?sub()
s
name<-paste(c1,c2)
name
names1<-paste0(c1,c2)
names1
name<-paste(c1,c2,sep=',')
name
newname<-sub("Rob","Cena",name)#在name中查找“Rob”,查找到就替换成“Cena”
newname
#If statement in R
x<-30L
if(is.integer(x)){
print("X is an integer")
}
class(x)
typeof(x)
score<-60
if(score(x)){
print("It is a good score!")
}else{
print("It is not a good score!")
}
score<-60
if(score>80){
print("It is a good score!")
}else{
print("It is not a good score!")
}
#While Loop in R
v<-c("Hello World")
count<-2
while(count<7){
print(v)
count=count+1
}
for(i in fruit)
w
#For loop in R
#for(value in vector){
#  statements
#}
fruit<-c('Apple','Orange','Passion fruit','Banana')
for(i in fruit){
print(i)
}
#Logical operations
df<-mtcars
data()
data()
data(mtcars)
data()
df
df[df['mpg']>=30,]
df['mpg']>=30
subset(df,mpg>=20)
df['mpg']
df[,'mpg']
df['mpg']
df[(df['mpg']>=20) & (df['hp']>100),]
subset(df,mpg>=20)
#else if statement
score<-63
if(score>80){
print("Good score!")
}else if(score>=60&score<80){
print("Decent score!")
}else if(score<60&score>33){
print("Average score!")
}else{
print("Poor!")
}
x<-0
while(x<10){
cat('x is currently:',x)
print('x is still less than 10, adding 1 to x')
#add one to x
x<-x+1
if(x==10){
print("x is equal to 10! Termianting the loop")
}
}
#R function to find the total number of years required to raise $8000 if the user deposits $750 per month
req_years<-function(amount=750){
famt=0;month=0
while(famt<=8000){
month=month+1
famt=famt+amount
message("Month=",month,"final_amount=",famt)
}
year=month/12
return(year)
}
req_years()
#R function to find the total number of years required to raise $8000 if the user deposits $750 per month
req_years<-function(amount=750){
famt=0;month=0
while(famt<=8000){
month=month+1
famt=famt+amount
message("Month=",month,"final_amount=",famt)
}
year=month\12
#R function to find the total number of years required to raise $8000 if the user deposits $750 per month
req_years<-function(amount=750){
famt=0;month=0
while(famt<=8000){
month=month+1
famt=famt+amount
message("Month=",month,"final_amount=",famt)
}
year=month/12
return(year)
}
req_years()
req_years(750)
req_years(750,722)
req_years()
req_years(c(750,722))
#R function to find the total number of years required to raise $8000 if the user deposits $750 per month
req_years<-function(amount=550){
famt=0;month=0
while(famt<=8000){
month=month+1
famt=famt+amount
message("Month=",month,"final_amount=",famt)
}
year=month/12
return(year)
}
req_years()
req_years(750)
#use break statement in a while loop
x<-0
while(x<10){
cat('x is currently:',x)
print('x is still less than 5, adding 1 to x')
#add one to x
x<-x+1
if(x==10){
print("x is equal to 10! Terminating loop")
}
}
#use break statement in a while loop
x<-0
while(x<5){
cat('x is currently:',x)
print('x is still less than 5, adding 1 to x')
#add one to x
x<-x+1
if(x==5){
print("x is equal to 5!")
break
print("I will also print, woohoo!")
}
}
vec<-c(1,2,3,4,5)
for(i in 1:length(vec)){
print(vec[i])
}
#for loop over a list
li<-list(1,2,3,4,5)
for(i in 1:length(li)){
print(li[[i]])
}
#for loop to print a matrix
mat<-matrix(1:25,nrow=5)
mat
for(num in mat){
print(num)
}
#example to print the square and square roots of numbers b/w 1-25
for(i in 1:25){
sq=i*i
sqroot=sqrt(i)
message("i=",i,"sq=",sq,"sqroot=",sqroot)
}
#function is a set of statements to perform a specific task. R has a large number of in-built functions and the user can create their own functions
#Syntax:
#function_name<-function(arg_1,arg_2,...){
#  Function body
#}
#Example:
squares<-function(a){
for(i in 1:a){
b<-i^2
print(b)
}
}
squares(4)
#function is a set of statements to perform a specific task. R has a large number of in-built functions and the user can create their own functions
#Syntax:
#function_name<-function(arg_1,arg_2,...){
#  Function body
#}
#Example:
squares<-function(a){
for(i in 1:a){
b<-i^2
cat(b)
}
}
squares(4)
#function is a set of statements to perform a specific task. R has a large number of in-built functions and the user can create their own functions
#Syntax:
#function_name<-function(arg_1,arg_2,...){
#  Function body
#}
#Example:
squares<-function(a){
for(i in 1:a){
b<-i^2
message(b)
}
}
squares(4)
#function is a set of statements to perform a specific task. R has a large number of in-built functions and the user can create their own functions
#Syntax:
#function_name<-function(arg_1,arg_2,...){
#  Function body
#}
#Example:
squares<-function(a){
for(i in 1:a){
b<-i^2
print(b)
}
}
squares(4)
#Built-in function
#Math function
#abs():returns the absolute of a number
abs(-5)
#mean():returns the mean of values between a range
v<-c(1,2,3,4,5)
mean(v)
#Built-in function
#Work with data structures
#seq():used to create sequences
seq(1,10,by=2)
class(seq(1,10,by=2))
#sort():used to create sequences
v<-c(11,4,5,7,3,10,2)
#sort():used to create sequences
v<-c(11,4,5,7,3,10,2)
sort(v)
sort(v,decreasing=TRUE)
#rev():reverse elements in R objects
v2<-c(1,2,3,4,5)
rev(v2)
append(v,v2)
#append():combine objects in R
v<-c(11,4,5,73,10,2)
v2<-c(1,2,3,4,5)
append(v,v2)
grepl('fun',text)
#Regular expression in R
#Pattern matching
#grepl():returns a logical value indicating if the pattern was found
text<-"R is fun to learn"
grepl('fun',text)
grep1('Python',text)
grepl('Python',text)
#grep():returns a vector of index locations of matching pattern instances
v<-c('a','b','c','d')
grep('b',v)
grep('d',v)
#Example:
#Simple function, no inputs!
hello_world<-function(){
print('hello world in R!')
}
hello_world()
#Function with a single argument
hello_name<-function(name){
print(paste('hello',name))
}
hello_name('John')
#Function to add 2 numbers
add_num<-function(num1,num2){
print(num1+num2)
}
add_num(30,40)
#Function with default argument values
hello_name<-function(name='Rick'){
print(paste('Hello',name))
}
hello_name()
hello_name('Sam')
#Return the value from a function
full_name<-function(name='Sachin',title='Tendulkar'){
return(paste(name,' ',title))
}
full_name()
#Return the value from a function
full_name<-function(name='Sachin',title='Tendulkar'){
return(paste(name,title))
}
full_name()
paste
?paste
full_name1<-full_name('Don','Bradman')
full_name1
#Return the value from a function
full_name<-function(name='Sachin',title='Tendulkar'){
return(paste(name,' ',title))
}
full_name()
full_name1<-full_name('Don','Bradman')
full_name1
full_name(title-'john',name='smith')
full_name(title='john',name='smith')
#Scope of a variable in a function
#Built-in Functions
#10 generate 1000 random values from a normal distribution of mean 0 and 1
normalDist<-rnorm(1000,0,1)
normalDist
mean(normalDist)
hist(normalDist)
#to get histogram with large number of interval breaks
hist(normalDist,break=50)
#to get histogram with large number of interval breaks
hist(normalDist,breaks=50)
hist(normalDist)
#to get histogram with large number of interval breaks
hist(normalDist,breaks=50)
#to get histogram with large number of interval breaks
hist(normalDist,breaks=2)
#to get histogram with large number of interval breaks
hist(normalDist,breaks=50)
#We can provide arguments to functions by position
#We could do the above example without breaks argument but as a good practice we should provide name to arguments
hist(normalDist,50)
#Function with optional arguments(同上)
expoValue<-function(x,power=2){
hist(x^power)
}
expoValue(normalDist)
#or
expoValue(normalDist,power=3)
expoValue(normalDist,4)
#Using named arguments (and passing any other arguments)
expoValue<-function(x,power=2,...){
hist(x^power,...)
}
expoValue(normalDist,power=2,breaks=50)
#passing logical arguments
expoValue<-function(x,exp=2,hist=FALSE,...){
if(hist==TRUE){
hist(x^exp)
x^exp
}else{
x^exp
}
}
expoValue(normalDist)
expoValue(normalDist,hist=TRUE)
expoValue(normalDist,hist=TRUE,breaks=50)
expoValue(normalDist,hist=TRUE,breaks=50)
#passing logical arguments
expoValue<-function(x,exp=2,hist=FALSE,...){
if(hist==TRUE){
hist(x^exp,...)
x^exp
}else{
x^exp
}
}
expoValue(normalDist)
expoValue(normalDist,hist=TRUE,breaks=50)
expoValue(normalDist)
#Scope of a variable in a function
v<-"I'm global variable"
stuff<-"I'm global stuff"
fun<-function(stuff){
print(v)
stuff<-"Reassign stuff inside the function"
print(stuff)
}
print(v)
print(stuff)
fun(stuff)
print(stuff)
t=x+x*(20/100)
#Create a function to find the final amount to be paid by a customer after adding 20% tax to the purchased amount
amount<-function(x=100){
t=x+x*(20/100)
return(t)
}
amount(100)
#------------------------
amount1<-function(amt){
if(amt>0) famt=amt+amt*(20/100)
if(amt<=0) famt=amt
return(famt)
}
amount1(100)
amount1(0)
#Check the argument and the body of a function
args(amount1)
body(amount1)
#Check the argument and the body of a function
args(amount1)
#Special case
g2<-function(x){
y+(x*x)
}
f2<-function(x){
y=10
g2(x)
}
f2(10)
#Special case
g2<-function(x){
y+(x*x)
}
f2<-function(x){
y=10
g2(x)
}
f2(10)
#Special case
g2<-function(x){
y+(x*x)
}
f2<-function(x){
y=10
g2(x)
}
f2(10)
#Special case
g2<-function(x){
y+(x*x)
}
f2<-function(x){
y=10
g2(x)
}
f2(10)
f2<-function(x){
y=10
g2(x)
}
f2(10)
#Special case
g2<-function(x){
y+(x*x)
}
y=10
f2<-function(x){
g2(x)
}
f2(10)
#Example to return hra amount based on cities
HRA<-function(city){
hra_amt<-switch(toupper(city),
BLR=7500,
MUM=1000,
DEL=8000,
CHN=7500,
5000
)
return(hra_amt)
}
#Example to return hra amount based on cities
HRA<-function(city){
hra_amt<-switch(toupper(city),
BLR=7500,
MUM=1000,
DEL=8000,
CHN=7500,
5000
)
return(hra_amt)
}
HRA("BLR")
HRA("PUNE")
HRA("blr")
#Use repeat in R
time<-15
repeat{
message("Hello, welcome to R tutorial for beginner!")
if(time>=20) break
time=time+1
}
#Factors in R
Type<-c("s","m","l","s","l","m")
#Factors in R
Type<-c("s","m","l","s","l","m")
Type[3]>Type[4]
Type[1]>Type[2]
Type[2]>Type[3]
